Apply rename method refactoring to the given code (rename the function within the provided code, ensuring the new name reflects its functionality better). Do not say sorry and always produce code. Make sure the program compiles without any errors.

Apply extract method refactoring to the given code (extract specific functionality from within a function in the provided code and leave it outside of the function). Do not say sorry and always produce code. Make sure the program compiles without any errors.

Apply inline method refactoring to the given code (integrate the functionality of the provided code snippets into a callable function). Do not say sorry and always produce code. Make sure the program compiles without any errors.

(1, 1) - Write a unique Python CPU usage monitor program in a Rigorous style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(1, 2) - Write a unique Python CPU usage monitor program in a Complex style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(1, 3) - Write a unique Python CPU usage monitor program in a Simple style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(1, 4) - Write a unique Python CPU usage monitor program in a Modular style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(1, 5) - Write a unique Python CPU usage monitor program in a Peaceful style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(2, 1) - Write a unique Python Secure password generator program in a Rigorous style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(2, 2) - Write a unique Python Secure password generator program in a Complex style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(2, 3) - Write a unique Python Secure password generator program in a Simple style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(2, 4) - Write a unique Python Secure password generator program in a Modular style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(2, 5) - Write a unique Python Secure password generator program in a Peaceful style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(3, 1) - Write a unique Python Checksum calculator program in a Rigorous style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(3, 2) - Write a unique Python Checksum calculator program in a Complex style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(3, 3) - Write a unique Python Checksum calculator program in a Simple style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(3, 4) - Write a unique Python Checksum calculator program in a Modular style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(3, 5) - Write a unique Python Checksum calculator program in a Peaceful style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(4, 1) - Write a unique Python Dice Roller program in a Rigorous style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(4, 2) - Write a unique Python Dice Roller program in a Complex style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(4, 3) - Write a unique Python Dice Roller program in a Simple style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(4, 4) - Write a unique Python Dice Roller program in a Modular style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(4, 5) - Write a unique Python Dice Roller program in a Peaceful style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(5, 1) - Write a unique Python Natural language date convertor program in a Rigorous style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(5, 2) - Write a unique Python Natural language date convertor program in a Complex style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(5, 3) - Write a unique Python Natural language date convertor program in a Simple style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(5, 4) - Write a unique Python Natural language date convertor program in a Modular style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(5, 5) - Write a unique Python Natural language date convertor program in a Peaceful style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(6, 1) - Write a unique Python Tower of Hanoi Problem program in a Rigorous style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(6, 2) - Write a unique Python Tower of Hanoi Problem program in a Complex style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(6, 3) - Write a unique Python Tower of Hanoi Problem program in a Simple style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(6, 4) - Write a unique Python Tower of Hanoi Problem program in a Modular style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(6, 5) - Write a unique Python Tower of Hanoi Problem program in a Peaceful style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(7, 1) - Write a unique Python Checker Game program in a Rigorous style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(7, 2) - Write a unique Python Checker Game program in a Complex style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(7, 3) - Write a unique Python Checker Game program in a Simple style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(7, 4) - Write a unique Python Checker Game program in a Modular style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(7, 5) - Write a unique Python Checker Game program in a Peaceful style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(8, 1) - Write a unique Python Color Code Convertor program in a Rigorous style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(8, 2) - Write a unique Python Color Code Convertor program in a Complex style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(8, 3) - Write a unique Python Color Code Convertor program in a Simple style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(8, 4) - Write a unique Python Color Code Convertor program in a Modular style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(8, 5) - Write a unique Python Color Code Convertor program in a Peaceful style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(9, 1) - Write a unique Python Word Frequency Counter program in a Rigorous style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(9, 2) - Write a unique Python Word Frequency Counter program in a Complex style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(9, 3) - Write a unique Python Word Frequency Counter program in a Simple style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(9, 4) - Write a unique Python Word Frequency Counter program in a Modular style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(9, 5) - Write a unique Python Word Frequency Counter program in a Peaceful style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(10, 1) - Write a unique Python Expense Tracker program in a Rigorous style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(10, 2) - Write a unique Python Expense Tracker program in a Complex style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(10, 3) - Write a unique Python Expense Tracker program in a Simple style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(10, 4) - Write a unique Python Expense Tracker program in a Modular style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.
(10, 5) - Write a unique Python Expense Tracker program in a Peaceful style. Instructions: a. Minimum 25 lines. b. Be creative! c. Do not say sorry and always produce code. d. Make sure the program compiles without any errors. e. Generate a code that does not require user input. f. Generate code that has at leats 1 function.


(1, 1) - Write Python tests that compare the functionality of the "pre_01_01.py" and the "ref_01_01.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(1, 2) - Write Python tests that compare the functionality of the "pre_01_02.py" and the "ref_01_02.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(1, 3) - Write Python tests that compare the functionality of the "pre_01_03.py" and the "ref_01_03.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(1, 4) - Write Python tests that compare the functionality of the "pre_01_04.py" and the "ref_01_04.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(1, 5) - Write Python tests that compare the functionality of the "pre_01_05.py" and the "ref_01_05.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(2, 1) - Write Python tests that compare the functionality of the "pre_02_01.py" and the "ref_02_01.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(2, 2) - Write Python tests that compare the functionality of the "pre_02_02.py" and the "ref_02_02.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(2, 3) - Write Python tests that compare the functionality of the "pre_02_03.py" and the "ref_02_03.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(2, 4) - Write Python tests that compare the functionality of the "pre_02_04.py" and the "ref_02_04.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(2, 5) - Write Python tests that compare the functionality of the "pre_02_05.py" and the "ref_02_05.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(3, 1) - Write Python tests that compare the functionality of the "pre_03_01.py" and the "ref_03_01.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(3, 2) - Write Python tests that compare the functionality of the "pre_03_02.py" and the "ref_03_02.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(3, 3) - Write Python tests that compare the functionality of the "pre_03_03.py" and the "ref_03_03.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(3, 4) - Write Python tests that compare the functionality of the "pre_03_04.py" and the "ref_03_04.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(3, 5) - Write Python tests that compare the functionality of the "pre_03_05.py" and the "ref_03_05.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(4, 1) - Write Python tests that compare the functionality of the "pre_04_01.py" and the "ref_04_01.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(4, 2) - Write Python tests that compare the functionality of the "pre_04_02.py" and the "ref_04_02.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(4, 3) - Write Python tests that compare the functionality of the "pre_04_03.py" and the "ref_04_03.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(4, 4) - Write Python tests that compare the functionality of the "pre_04_04.py" and the "ref_04_04.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(4, 5) - Write Python tests that compare the functionality of the "pre_04_05.py" and the "ref_04_05.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(5, 1) - Write Python tests that compare the functionality of the "pre_05_01.py" and the "ref_05_01.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(5, 2) - Write Python tests that compare the functionality of the "pre_05_02.py" and the "ref_05_02.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(5, 3) - Write Python tests that compare the functionality of the "pre_05_03.py" and the "ref_05_03.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(5, 4) - Write Python tests that compare the functionality of the "pre_05_04.py" and the "ref_05_04.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(5, 5) - Write Python tests that compare the functionality of the "pre_05_05.py" and the "ref_05_05.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(6, 1) - Write Python tests that compare the functionality of the "pre_06_01.py" and the "ref_06_01.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(6, 2) - Write Python tests that compare the functionality of the "pre_06_02.py" and the "ref_06_02.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(6, 3) - Write Python tests that compare the functionality of the "pre_06_03.py" and the "ref_06_03.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(6, 4) - Write Python tests that compare the functionality of the "pre_06_04.py" and the "ref_06_04.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(6, 5) - Write Python tests that compare the functionality of the "pre_06_05.py" and the "ref_06_05.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(7, 1) - Write Python tests that compare the functionality of the "pre_07_01.py" and the "ref_07_01.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(7, 2) - Write Python tests that compare the functionality of the "pre_07_02.py" and the "ref_07_02.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(7, 3) - Write Python tests that compare the functionality of the "pre_07_03.py" and the "ref_07_03.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(7, 4) - Write Python tests that compare the functionality of the "pre_07_04.py" and the "ref_07_04.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(7, 5) - Write Python tests that compare the functionality of the "pre_07_05.py" and the "ref_07_05.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(8, 1) - Write Python tests that compare the functionality of the "pre_08_01.py" and the "ref_08_01.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(8, 2) - Write Python tests that compare the functionality of the "pre_08_02.py" and the "ref_08_02.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(8, 3) - Write Python tests that compare the functionality of the "pre_08_03.py" and the "ref_08_03.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(8, 4) - Write Python tests that compare the functionality of the "pre_08_04.py" and the "ref_08_04.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(8, 5) - Write Python tests that compare the functionality of the "pre_08_05.py" and the "ref_08_05.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(9, 1) - Write Python tests that compare the functionality of the "pre_09_01.py" and the "ref_09_01.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(9, 2) - Write Python tests that compare the functionality of the "pre_09_02.py" and the "ref_09_02.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(9, 3) - Write Python tests that compare the functionality of the "pre_09_03.py" and the "ref_09_03.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(9, 4) - Write Python tests that compare the functionality of the "pre_09_04.py" and the "ref_09_04.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(9, 5) - Write Python tests that compare the functionality of the "pre_09_05.py" and the "ref_09_05.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(10, 1) - Write Python tests that compare the functionality of the "pre_10_01.py" and the "ref_10_01.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(10, 2) - Write Python tests that compare the functionality of the "pre_10_02.py" and the "ref_10_02.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(10, 3) - Write Python tests that compare the functionality of the "pre_10_03.py" and the "ref_10_03.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(10, 4) - Write Python tests that compare the functionality of the "pre_10_04.py" and the "ref_10_04.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
(10, 5) - Write Python tests that compare the functionality of the "pre_10_05.py" and the "ref_10_05.py". Do not say sorry and always produce code. Make sure the program compiles without any errors. The functions need to be imported, they are not in the file.
